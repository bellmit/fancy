<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd  
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd  
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd  
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd  
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd  
        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.1.xsd  
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.1.xsd  
        http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.1.xsd  
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd  
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd" default-lazy-init="true">
	<!-- 加载属性文件 -->
	
	<context:property-placeholder ignore-unresolvable="true"  location="classpath:fancy.properties" />
<!-- ====================================================================================== -->
	<!-- 启用基于注解（Annotation-based）的配置 -->
	<!-- ====================================================================================== -->
	<context:component-scan base-package="cn.fancy.spring,cn.telling.common" />
	<!-- ====================================================================================== -->
	<!-- 基于注解的事务配置 <tx:annotation-driven transaction-manager="txManager" /> -->
	<!-- ====================================================================================== -->
	<tx:annotation-driven transaction-manager="txManager" />
	
	
	<!-- 加载属性文件 -->
	<!-- ====================================================================================== -->
	<context:property-placeholder location="classpath:log4j.properties" />
	<!-- ====================================================================================== -->
	
	
	
	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	    <property name="driverClassName" value="${jdbc.driver}" />
	    
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" /> 
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
		
		<!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="stat" /> 
	</bean>
	
	
	<!--配置 数据源 连接池 c3p0   读写数据源 -->
	<bean id="b2b-ds-1" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" lazy-init="default">
		<property name="driverClass" value="${b2b-ds-1.driver}"></property>
		<property name="jdbcUrl" value="${b2b-ds-1.url}"></property>
		<property name="user" value="${b2b-ds-1.username}"></property>
		<property name="password" value="${b2b-ds-1.password}"></property>
		<property name="initialPoolSize" value="${b2b-ds-1.initialPoolSize}"></property>
		<property name="minPoolSize" value="${b2b-ds-1.minPoolSize}"></property>
		<property name="maxPoolSize" value="${b2b-ds-1.maxPoolSize}"></property>
		<property name="maxIdleTime" value="${b2b-ds-1.maxIdleTime}"></property>
		<property name="acquireIncrement" value="${b2b-ds-1.acquireIncrement}"></property>
		<property name="idleConnectionTestPeriod" value="${b2b-ds-1.idleConnectionTestPeriod}"></property>
		<property name="acquireRetryAttempts" value="${b2b-ds-1.acquireRetryAttempts}"></property>
		<property name="breakAfterAcquireFailure" value="${b2b-ds-1.breakAfterAcquireFailure}"></property>
		<property name="maxStatements" value="${b2b-ds-1.maxStatements}"></property>
		<property name="maxStatementsPerConnection" value="${b2b-ds-1.maxStatementsPerConnection}"></property>
		<property name="testConnectionOnCheckout" value="${b2b-ds-1.testConnectionOnCheckout}"></property>
		<property name="numHelperThreads" value="${b2b-ds-1.numHelperThreads}"></property>
	</bean>
	
	<bean id="mysql" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" lazy-init="default">
		<property name="driverClass" value="${mysql-fancy.driver}"></property>
		<property name="jdbcUrl" value="${mysql-fancy.url}"></property>
		<property name="user" value="${mysql-fancy.username}"></property>
		<property name="password" value="${mysql-fancy.password}"></property>
		<property name="initialPoolSize" value="${mysql-fancy.initialPoolSize}"></property>
		<property name="minPoolSize" value="${mysql-fancy.minPoolSize}"></property>
		<property name="maxPoolSize" value="${mysql-fancy.maxPoolSize}"></property>
		<property name="maxIdleTime" value="${mysql-fancy.maxIdleTime}"></property>
		<property name="acquireIncrement" value="${mysql-fancy.acquireIncrement}"></property>
		<property name="idleConnectionTestPeriod" value="${mysql-fancy.idleConnectionTestPeriod}"></property>
		<property name="acquireRetryAttempts" value="${mysql-fancy.acquireRetryAttempts}"></property>
		<property name="breakAfterAcquireFailure" value="${mysql-fancy.breakAfterAcquireFailure}"></property>
		<property name="maxStatements" value="${mysql-fancy.maxStatements}"></property>
		<property name="maxStatementsPerConnection" value="${mysql-fancy.maxStatementsPerConnection}"></property>
		<property name="testConnectionOnCheckout" value="${mysql-fancy.testConnectionOnCheckout}"></property>
		<property name="numHelperThreads" value="${mysql-fancy.numHelperThreads}"></property>
	</bean>
	
	<!-- 事务配置 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="b2b-ds-1" />
	</bean>
	
	
	<!-- Fancy 事务配置 -->
	<bean id="fancyTxManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- SpringJDBC Template 配置 -->
	<!-- ====================================================================================== -->
    <bean id="film-template" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="b2b-ds-1" />
	</bean>

	<!-- Fancy Template 配置 -->
	<!-- ====================================================================================== -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- Spring Oracle大字段处理类 配置 -->
	<bean id="nativeJdbcExtractor"
		class="org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor"
		lazy-init="true" />
	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.OracleLobHandler"
		lazy-init="true">
		<property name="nativeJdbcExtractor" ref="nativeJdbcExtractor" />
	</bean>
	
	<!-- 全局异常错误处理 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView">
			<value>/error/error</value>
		</property>
		<property name="defaultStatusCode">
			<value>500</value>
		</property>
		<!-- 需要在log4j中也有对应的配置 -->
		<property name="warnLogCategory">
			<value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver
			</value>
		</property>
		<property name="exceptionMappings">
			<props>
				<prop key="java.sql.SQLException">/error/error</prop>
			</props>
		</property>
	</bean>


	<!-- 加载应用属性实例，可通过  @Value("#{APP_PROP['jdbc.driver']}") String jdbcDriver 方式引用 -->
	<!--  请求action方法上应用   public String deploy(@Value("#{APP_PROP['activiti.export.diagram.path']}") String exportDir,  -->
    <util:properties id="APP_PROP" location="classpath:fancy.properties" local-override="true"/>
	
	
	
</beans>