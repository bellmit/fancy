<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd  
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd  
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd  
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd  
        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.0.xsd  
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.0.xsd  
        http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-4.0.xsd  
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd  
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd" >
        
        <!--default-lazy-init="false" -会默认加载会默认加载整个对象实例图，从初始化ACTION配置、到 service配置到dao配置、乃至到数据库连接、事务 -->
    <description>Spring Configuration</description>
	
	<!-- 加载属性文件 -->
	<context:property-placeholder ignore-unresolvable="true"  location="classpath:fancy.properties" />
	
	<!-- 启用基于注解（Annotation-based）的配置 -->
		<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
	<!-- base-package 如果多个，用“,”分隔 -->
	<context:component-scan base-package="cn.telling" >
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!--注册两个bean DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapte -->
<!-- <mvc:annotation-driven />  -->
	
	<!-- 启用Spring对@AspectJ切面配置的支持 <aop:aspectj-autoproxy /> -->
	<!-- proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。如果proxy-target-class 属性值被设置为true，那么基于类的代理将起作用（这时需要cglib库）。
	如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 基于接口的代理 -->
	<!--AOP包括切面（aspect）、通知（advice）、连接点（joinpoint），实现方式就是通过对目标对象的代理在连接点前后加入通知，完成统一的切面操作。 -->
	<aop:aspectj-autoproxy />
	

  	<!-- ====================================Memcacheed缓存客服端 ========================================= -->

	<bean id="memcachedPool" class="com.danga.MemCached.SockIOPool"
		factory-method="getInstance" init-method="initialize" destroy-method="shutDown">
		<constructor-arg>
			<value>neeaMemcachedPool</value>
		</constructor-arg>
		<property name="servers">
			<list>
			    <value>10.110.1.232:11211</value>
				<!-- <value>192.168.102.207:12000</value> 测试缓存服务器 -->
				<!-- <value>172.100.1.241:12000</value>正式缓存服务器 -->
				<!--多服务器 -->
				<!-- <value>172.100.1.241:12000</value> -->
				<!-- <value>172.100.1.242:12000</value> -->
				<!-- <value>172.100.1.243:12000</value> -->
				<!-- <value>172.100.1.245:12000</value> -->
			</list>
			
		</property>
		<!-- <property name="weights"> -->
		<!-- <list> -->
		<!-- <value>5</value> -->
		<!-- <value>5</value> -->
		<!-- <value>5</value> -->
		<!-- <value>5</value> -->
		<!-- </list> -->
		<!-- </property> -->
		<property name="initConn">
			<value>40</value>
		</property>
		<property name="minConn">
			<value>40</value>
		</property>
		<property name="maxConn">
			<value>200</value>
		</property>
		<property name="maintSleep">
			<value>5000</value>
		</property>
		<property name="nagle">
			<value>false</value>
		</property>
		<property name="socketTO">
			<value>3000</value>
		</property>
	</bean>
	<bean id="memcachedClient" class="com.danga.MemCached.MemCachedClient">
		<!-- <property name="compressEnable"> <value>true</value> </property> <property 
			name="compressThreshold"> <value>4096</value> </property> -->
	</bean>

	<import resource="classpath:net/bull/javamelody/monitoring-spring-aspectj.xml" />
	<!-- 性能监控 -->
	<bean id="facadeMonitoringAdvisor" class="net.bull.javamelody.MonitoringSpringAdvisor">
		<property name="pointcut">
			<bean class="org.springframework.aop.support.JdkRegexpMethodPointcut">
				<property name="pattern" value="org.melody.*.*.service.*" /><!--正则表达式 -->
			</bean>
		</property>
	</bean>  


	<!-- ====================================Jedis start========================================= -->

	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxActive" value="${redis.maxActive}" />
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxWait" value="${redis.maxWait}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.ip}" />
		<property name="port" value="${redis.port}" />
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>

	<bean id="jedis-Template" class="org.springframework.data.redis.core.RedisTemplate" p:connection-factory-ref="jedisConnectionFactory" />


	<!-- ====================================Jedis start========================================= -->
	<!-- 
	<bean id="cacheInit" class="com.tools.cache.CacheInit"></bean>
	 -->
	<bean id="cacheManaer" class="cn.telling.common.CacheManager" >
		<property name="memClient" ref="memcachedClient"/>  
	</bean>
	
	<!-- 默认扫描 @Component @Repository @Service @Controller -->
	<!-- <context:annotation-config /> -->
	
	
	<!-- 缓存配置 -->
	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:${ehcache.configFile}" />
	</bean>
	
	<!-- 配置 JSR303 Bean Validator 定义 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
	
  	<!-- aop -->
	<bean id="logService" class="cn.telling.web.LogService"></bean>

	<!-- 启动对@AspectJ注解的支持 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- <aop:config> <aop:aspect ref="logService"> </aop:aspect> </aop:config> -->

	
	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	    <property name="driverClassName" value="${jdbc.driver}" />
	    
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" /> 
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
		
		<!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="stat" /> 
	</bean>
	
	
	<!--配置 数据源 连接池 c3p0   读写数据源 -->
	<!-- <bean id="b2b-ds-1" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" lazy-init="default">
		<property name="driverClass" value="${b2b-ds-1.driver}"></property>
		<property name="jdbcUrl" value="${b2b-ds-1.url}"></property>
		<property name="user" value="${b2b-ds-1.username}"></property>
		<property name="password" value="${b2b-ds-1.password}"></property>
		<property name="initialPoolSize" value="${b2b-ds-1.initialPoolSize}"></property>
		<property name="minPoolSize" value="${b2b-ds-1.minPoolSize}"></property>
		<property name="maxPoolSize" value="${b2b-ds-1.maxPoolSize}"></property>
		<property name="maxIdleTime" value="${b2b-ds-1.maxIdleTime}"></property>
		<property name="acquireIncrement" value="${b2b-ds-1.acquireIncrement}"></property>
		<property name="idleConnectionTestPeriod" value="${b2b-ds-1.idleConnectionTestPeriod}"></property>
		<property name="acquireRetryAttempts" value="${b2b-ds-1.acquireRetryAttempts}"></property>
		<property name="breakAfterAcquireFailure" value="${b2b-ds-1.breakAfterAcquireFailure}"></property>
		<property name="maxStatements" value="${b2b-ds-1.maxStatements}"></property>
		<property name="maxStatementsPerConnection" value="${b2b-ds-1.maxStatementsPerConnection}"></property>
		<property name="testConnectionOnCheckout" value="${b2b-ds-1.testConnectionOnCheckout}"></property>
		<property name="numHelperThreads" value="${b2b-ds-1.numHelperThreads}"></property>
	</bean> -->
	
	<!-- 事务配置 -->
	<!-- <bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="b2b-ds-1" />
	</bean> -->
	
	<!-- Fancy 事务配置 -->
	<bean id="fancyTxManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- SpringJDBC Template 配置 -->
	<!-- ====================================================================================== -->
  <!--   <bean id="film-template" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="b2b-ds-1" />
	</bean> -->

	<!-- Fancy Template 配置 -->
	<!-- ====================================================================================== -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- Spring Oracle大字段处理类 配置 -->
	<bean id="nativeJdbcExtractor"
		class="org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor"
		lazy-init="true" />
	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.OracleLobHandler"
		lazy-init="true">
		<property name="nativeJdbcExtractor" ref="nativeJdbcExtractor" />
	</bean>
	
		<!--====================================文件上传配置 ========================================= -->
	   <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!--设置上传文件大小的参数 ，单个文件不允许超过10M -->
        <property name="maxUploadSize" value="8000000"/>    
		<!-- 默认编码 -->
        <property name="defaultEncoding" value="UTF-8"/> 
    </bean>
    
    <!-- 加载应用属性实例，可通过  @Value("#{APP_PROP['jdbc.driver']}") String jdbcDriver 方式引用 -->
	<!--  请求action方法上应用   public String deploy(@Value("#{APP_PROP['activiti.export.diagram.path']}") String exportDir,  -->
    <util:properties id="APP_PROP" location="classpath:fancy.properties" local-override="true"/>
</beans>